
--[[--- @usage
local PATH = require "path"

-- suppose we run on windows
assert(PATH.IS_WINDOWS)

-- we can use system dependet function
print(PATH.user_home())  -- C:\Documents and Settings\Admin
print(PATH.currentdir()) -- C:\lua\5.1

-- but we can use specific system path notation
local ftp_path = PATH.new('/')
print(ftp_path:join("/root", "some", "dir")) -- /root/some/dir

-- All functions specific to system will fail
assert(not pcall( ftp_path:currentdir() ) )
--]]


local PATH = {}

---
--
PATH.DIR_SEP    = DIR_SEP

---
--
PATH.IS_WINDOWS = IS_WINDOWS

--
-- PATH manipulation 

---
-- @local
function PATH:unquote(P)end

---
-- @local
function PATH:quote(P)end

---
--
function PATH:has_dir_end(P)end

---
--
function PATH:remove_dir_end(P)end

---
--
function PATH:ensure_dir_end(P)end

---
-- @local
function PATH:normolize_sep(P) end

---
--
function PATH:normolize(P) end

---
--
function PATH:join(...)end

---
--
function PATH:splitext(P) end

---
--
function PATH:splitpath(P)end

---
--
function PATH:splitroot(P)end

---
--
function PATH:basename(P)end

---
--
function PATH:dirname(P)end

---
--
function PATH:extension(P)end

---
--
function PATH:root(P)end

---
--
function PATH:isfullpath(P)end


--
-- FS manipulation

--- return user_home dir
--
function PATH:user_home()end

--- Return file attributes
-- On Windows it is result of GetFileAttributesEx
-- depends on path.fs
function PATH:flags(P)end

--- Return path to temp directory.
-- On Windows can use GetTempPath if Alien/FFI/afx have been found
-- On Windows use TMP/TEMP environment variables
-- depends on path.fs
function PATH:tmpdir() end

--- Return full path for temp file.
-- depends on path.fs
function PATH:tmpname()end

--- 
-- depends on path.fs
function PATH:size(P)end


---
-- depends on path.fs
function PATH:fullpath(P)end

---
-- @local
-- depends on path.fs
function PATH:attrib(P, ...)end

---
-- depends on path.fs
function PATH:exists(P)end

---
-- depends on path.fs
function PATH:isdir(P)end

---
-- depends on path.fs
function PATH:isfile(P)end

---
-- depends on path.fs
function PATH:islink(P)end

---
-- depends on path.fs
function PATH:ctime(P)end

---
-- depends on path.fs
function PATH:mtime(P)end

---
-- depends on path.fs
function PATH:atime(P)end

---
-- depends on path.fs and LuaDate
function PATH:cdate(P)end

---
-- depends on path.fs and LuaDate
function PATH:mdate(P)end

---
-- depends on path.fs and LuaDate
function PATH:adate(P)end

--- Create new directory.
-- depends on path.fs
function PATH:mkdir(P)end

--- Remove empty directory.
-- depends on path.fs
function PATH:rmdir(P)end

--- Remove empty directory or file.
-- @tparam P string
-- @tparam opt ?remove_opt
-- depends on path.fs
function PATH:remove(P, opt)end

---
-- depends on path.fs
function PATH:rename(from,to,force)end

---
-- @tparam from string
-- @tparam to string
-- @tparam opt ?copy_opt|boolean
-- depends on path.fs
function PATH:copy(from,to,opt)end

---
-- depends on path.fs
function PATH:currentdir()end

---
-- depends on path.fs
function PATH:chdir(P)end

---
-- depends on path.fs
function PATH:each(str_file, str_params, func_callback, tbl_option)end

---
-- depends on path.fs
function PATH:each(str_file, str_params, tbl_option)end

---
-- depends on path.fs
function PATH:each(str_file, func_callback, tbl_option)end

---
-- depends on path.fs
function PATH:each(str_file, tbl_option)end

---
-- depends on path.fs
function PATH:each(func_callback, tbl_option)end

---
--
local copy_opt = {
  delay = false;
  recurse = false;
  skipdirs = false;
  skipfiles = false;
  accept = function(src,dst) return true end;
  error  = function(err, src, dst) return true end;
}

---
--
local remove_opt = {
  delay = true;
  recurse = false;
  skipdirs = false;
  skipfiles = false;
  accept = function(src) return true end;
  error  = function(err, src) return true end;
}
